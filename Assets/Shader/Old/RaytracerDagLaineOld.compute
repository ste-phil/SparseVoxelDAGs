
#pragma kernel CSMain
#define LOCAL_GROUP_SIZE 8
#define MAX_SCALE 23
//#pragma use_dxc 
//#pragma enable_d3d11_debug_symbols

struct Ray
{
    float3 origin;
    float3 direction;
};

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
};

struct Plane
{
    float3 normal;
    float position;
};

struct DepthData
{
    int offset;
    float maxT;
};

//TODO: Use countbits

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.6f, 0.6f, 0.6f);
    return hit;
}

RWTexture2D<float4> Result;
RWStructuredBuffer<uint> _octreeNodes;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D<float4> _skyboxTexture;
SamplerState sampler_skyboxTexture;
static const float PI = 3.14159265f;

float3 _octreeLowerBounds;
float3 _octreeUpperBounds;

float _skyboxIntensity;
int _rayBounces;
float2 _pixelOffset;

float _directionalLightIntensity;
float3 _directionalLightDirection;

static RayHit _noHit = CreateRayHit();


Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

RayHit AABBHitAndNormal(float3 pos, float t, float3 bT, float3 dT)
{
    RayHit hit = CreateRayHit();

    hit.position = (t + bT) / dT;
    hit.distance = t;

    float3 originHit = hit.position - pos;
    if (abs(originHit.y) > abs(originHit.x))
    {
        hit.normal = abs(originHit.z) > abs(originHit.y) ? float3(0, 0, originHit.z) : float3(0, originHit.y, 0);
    }
    else
    {
        hit.normal = abs(originHit.z) > abs(originHit.x) ? float3(0, 0, originHit.z) : float3(originHit.x, 0, 0);
    }
    hit.normal = normalize(hit.normal);

    return hit;
}

//https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/building-basic-perspective-projection-matrix
float getProjectionFactor(int screenHeight, float pixelTolerance, float screenDivisor = 1.0f) {
    const float fov = 60;

    //Projection scale function of projected point
    const float halfFov = fov / 2.0f;
    const float inv_2tan_half_fov = 1.0f / (2.0f * tan(halfFov * PI / 180.0f));

    const float screen_tolerance = pixelTolerance / (screenHeight / screenDivisor);
    return inv_2tan_half_fov / screen_tolerance;

    //original code
    //const float inv_2tan_half_fovy = 1.0f / (2.0f * tan(0.5f * _fovy));
    //const float screen_tolerance = _pixelTolerance / (_screenRes[1] / screenDivisor);
    //return inv_2tan_half_fovy / screen_tolerance;
}


RayHit IntersectDag(Ray ray, float projFactor)
{
    DepthData rayStack[MAX_SCALE + 1];

    float3 o = ray.origin;
    float3 d = ray.direction;

    if (abs(d.x) < 1e-4f) d.x = 1e-4f;
    if (abs(d.y) < 1e-4f) d.y = 1e-4f;
    if (abs(d.z) < 1e-4f) d.z = 1e-4f;

    // Precompute the coefficients of tx(x), ty(y), and tz(z).
    // The octree is assumed to reside at coordinates [1, 2].

    float3 dT = 1.0f / -abs(d);
    float3 bT = dT * o;

    //Perform mirroring because we dont allow the ray`s components to be positive
    int octantMask = 0;
    if (d.x > 0.0f)
    {
        octantMask ^= 4;
        bT.x = 3.0f * dT.x - bT.x;
    }
    if (d.y > 0.0f)
    {
        octantMask ^= 2;
        bT.y = 3.0f * dT.y - bT.y;
    }
    if (d.z > 0.0f)
    {
        octantMask ^= 1;
        bT.z = 3.0f * dT.z - bT.z;
    }

    float minT = max(2.0f * dT.x - bT.x, max(2.0f * dT.y - bT.y, 2.0f * dT.z - bT.z));
    float maxT = min(dT.x - bT.x, min(dT.y - bT.y, dT.z - bT.z));

    //Remove behind the camera intersections
    minT = max(minT, 0.0f);

    // t = d * x - b
    // t + b = d * x
    // (t+b)/d = x

    uint parentIndex = 0;
    int currentNode = 0;
    int idx = 0;
    float3 pos = 1;
    int scale = MAX_SCALE - 1;

    float scaleExp2 = 0.5f;

    //1.5f is the position of the planes of the axis
    if (1.5f * dT.x - bT.x > minT)
    {
        idx ^= 4;
        pos.x = 1.5f;
    }
    if (1.5f * dT.y - bT.y > minT)
    {
        idx ^= 2;
        pos.y = 1.5f;
    }
    if (1.5f * dT.z - bT.z > minT)
    {
        idx ^= 1;
        pos.z = 1.5f;
    }

    while (scale < MAX_SCALE)
    {
        if (currentNode == 0)
            currentNode = _octreeNodes[parentIndex];

        float3 cornerT = pos * dT - bT;

        //minium t value to corner planes
        float maxTC = min(cornerT.x, min(cornerT.y, cornerT.z));

        int childShift = idx ^ octantMask;
        int childBit = 1 << childShift;
        int isValidNode = currentNode & childBit;

        if (isValidNode != 0 && minT <= maxT)
        {
            //push

            //Terminate ray if it is small enough
            if (scaleExp2 * projFactor > minT)
            {
                return AABBHitAndNormal(pos, minT, bT, dT);
            }

            //Set the max t of the current voxel clamped to maxT (maxT is the max t value of the bounding voxel)
            float maxTV = min(maxT, maxTC);

            //Checks if the first intersection of the ray (minT = entrance distance of the voxel) is before the second (maxTV = exit distance of the voxel)
            if (minT <= maxTV)
            {
                int lowerIndexLeafOctantMask = childBit - 1;

                //zero out all higher bits than octantId (& op) and count bits which are 0 (tells you how many octants are before this one = offset)
                int childIndexOffset = countbits((uint) (currentNode & lowerIndexLeafOctantMask)) + 1;

                int childRelativePtr = _octreeNodes[parentIndex + childIndexOffset];
                int childIndex = parentIndex + childIndexOffset + childRelativePtr;
                int childNode = _octreeNodes[childIndex];

                bool isLeafNode = childNode == 0;
                if (isLeafNode)
                {
                    //leaf node found
                    //Return minT here 

                    return AABBHitAndNormal(pos, minT, bT, dT);
                }

                rayStack[scale].offset = parentIndex;
                rayStack[scale].maxT = maxT;


                float halfScale = scaleExp2 * 0.5f;
                float3 centerT = halfScale * dT + cornerT;

                //Set parent to next child
                parentIndex = childIndex;

                //Reset current node so that it will be fetched again at the start of the loop
                currentNode = 0;

                idx = 0;
                scale--;
                scaleExp2 = halfScale;

                //find octant of next child which the ray enters first
                if (centerT.x > minT)
                {
                    idx ^= 4;
                    pos.x += scaleExp2;
                }
                if (centerT.y > minT)
                {
                    idx ^= 2;
                    pos.y += scaleExp2;
                }
                if (centerT.z > minT)
                {
                    idx ^= 1;
                    pos.z += scaleExp2;
                }

                maxT = maxTV;
                currentNode = 0;

                continue;
            }
        }

        //Advance in octants of this parent

        int stepMask = 0;
        if (cornerT.x <= maxTC)
        {
            stepMask ^= 4;
            pos.x -= scaleExp2;
        }
        if (cornerT.y <= maxTC)
        {
            stepMask ^= 2;
            pos.y -= scaleExp2;
        }
        if (cornerT.z <= maxTC)
        {
            stepMask ^= 1;
            pos.z -= scaleExp2;
        }

        minT = maxTC;
        idx ^= stepMask;

        if ((idx & stepMask) != 0)
        {
            //Pop
            //Move one level up

            //Bits of IEEE float Exponent used to determine 
            uint differingBits = 0;
            if ((stepMask & 4) != 0) differingBits |= asint(pos.x) ^ asint(pos.x + scaleExp2);
            if ((stepMask & 2) != 0) differingBits |= asint(pos.y) ^ asint(pos.y + scaleExp2);
            if ((stepMask & 1) != 0) differingBits |= asint(pos.z) ^ asint(pos.z + scaleExp2);

            //shift right 23 to remove mantisse bits
            scale = (asint((float) differingBits) >> 23) - 127;
            scaleExp2 = asfloat((scale - MAX_SCALE + 127) << 23);

            parentIndex = rayStack[scale].offset;
            maxT = rayStack[scale].maxT;

            int3 sh = asint(pos) >> scale;
            pos = asfloat(sh << scale);
            idx = ((sh.x & 1) << 2) | ((sh.y & 1) << 1) | (sh.z & 1);

            currentNode = 0;
        }
    }

    if (scale >= MAX_SCALE)
        return _noHit;

    //return minT;
    return _noHit;
}


bool InShadow(RayHit hit) 
{
    // * 0.001f is used to avoid self shadowing
    Ray shadowRay = CreateRay(hit.position + hit.normal * 0.003f, -1 * _directionalLightDirection);
    RayHit shadowHit = IntersectDag(shadowRay, 0);
    if (shadowHit.distance != 1.#INF)
        return true;
    return false;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        //if (InShadow(hit)) return float3(0.00f, 0.00f, 0.00f);

        //lambertian color
        float3 color = saturate(dot(hit.normal, _directionalLightDirection) * -1) * _directionalLightIntensity * hit.albedo;
        
        //phong shading
		//float3 reflectVec = reflect(_directionalLightDirection, hit.normal);
        
		//float3 camWorldPos = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
		//float3 viewVec = normalize(camWorldPos - hit.position);
		//color += pow(saturate(dot(reflectVec, viewVec) * -1), 3) * hit.specular;
        
        
		return color;
	}
    else
    {
        // Erase the ray's energy - the sky doesn't reflect anything
        // Stops the ray from bouncing arround
        //ray.energy = 0.0f;

        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        float3 color =  _skyboxTexture.SampleLevel(sampler_skyboxTexture, float2(phi, theta), 0).xyz;
        return color;
    }
}

//void ReflectRay(inout Ray ray, RayHit hit) 
//{
//    if (hit.distance < 1.#INF)
//    {
//        // Reflect the ray and multiply energy with specular reflection
//        ray.origin = hit.position + hit.normal * 0.001f;
//        ray.direction = reflect(ray.direction, hit.normal);
//		ray.energy *= hit.specular;
//	}
//}

[numthreads(LOCAL_GROUP_SIZE, LOCAL_GROUP_SIZE, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    // Transform pixel to [-1,1] range
	float2 uv = float2((id.xy + float2(0.5f, .5f)) / float2(width, height) * 2.0f - 1.0f);
    
    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);

    float projFactor = getProjectionFactor(height, 1.0f);
    RayHit hit = IntersectDag(ray, 0);

    float3 result = Shade(ray, hit);
    Result[id.xy] = float4(result, 1.0f);
}