#pragma kernel CSMain
//#pragma enable_d3d11_debug_symbols

#define LOCAL_GROUP_SIZE 8

#include "tracersDag.cginc"

RWTexture2D<float4> _outPositions;

//Node layout
//[0,3] = maxDepth
//[4,31] = chunkIndex
StructuredBuffer<uint> _inChunkToVoxels;
StructuredBuffer<uint> _inVoxels;

int2 _chunkDims;
int _chunkIntSize;
int _chunkLoadRange;

float3 _octreeLowerBounds;
float3 _octreeUpperBounds;

float4x4 _cameraToWorld;
float4x4 _cameraInverseProjection;

float2 _pixelOffset;

int2 WorldToChunkIndex(float3 worldPos)
{
    return int2((int) worldPos.x, (int) worldPos.z);
}

int WorldToFlatChunkIndex(float3 worldPos)
{
    return _chunkDims.x * (int) worldPos.z + (int) worldPos.x;
}

uint FetchChunkData(float3 worldPos)
{
    int flatChunkIndex = WorldToFlatChunkIndex(worldPos);
    return _inChunkToVoxels[flatChunkIndex];
}

uint FetchChunkStartIndex(uint chunkData)
{
    return (chunkData >> 4) * _chunkIntSize;
}

uint FetchChunkDepth(uint chunkData)
{
    return chunkData & 0xF;
}

void TransformRay(inout Ray ray, int2 chunkPos)
{
    ray.origin = ray.origin - float3(chunkPos.x, 0, chunkPos.y) + float3(1, 0, 1);
}

void TransformOutgoingRay(inout Ray ray, inout TraceResult res, inout float3 worldPos)
{
    const float eps = 1e-6;
    if (distance(res.hitPos.x, 2) <= eps)
    {
        ray.origin = ray.origin + float3(-1, 0, 0);
        res.hitPos.x = 2;
        worldPos.x += 1;
    }
    else if (distance(res.hitPos.x, 1) <= eps)
    {
        ray.origin = ray.origin + float3(1, 0, 0);
        res.hitPos.x = 1;
        worldPos.x -= 1;
    }
    //if (distance(res.hitPos.y, 2) <= 1e-4)
    //{
    //    ray.origin = ray.origin + float3(0, -1, 0);
    //    res.hitPos.y = 2;
    //    worldPos.y += 1;
    //}
    //else if (distance(res.hitPos.y, 1) <= 1e-4)
    //{
    //    ray.origin = ray.origin + float3(0, 1, 0);
    //    res.hitPos.y = 1;
    //    worldPos.y -= 1;
    //}
    else if (distance(res.hitPos.z, 2) <= eps)
    {
        ray.origin = ray.origin + float3(0, 0, -1);
        res.hitPos.z = 2;
        worldPos.z += 1;

    }
    else if (distance(res.hitPos.z, 1) <= eps)
    {
        ray.origin = ray.origin + float3(0, 0, 1);
        res.hitPos.z = 1;
        worldPos.z -= 1;
    }
}

bool IsInWorld(float3 pos)
{
    return pos.x < _chunkDims.x && pos.x >= 0
        && pos.z < _chunkDims.y && pos.z >= 0;
}

[numthreads(LOCAL_GROUP_SIZE, LOCAL_GROUP_SIZE, 1)]
void CSMain(uint3 id : SV_DispatchThreadID, uint3 gThreadId : SV_GroupThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    _outPositions.GetDimensions(width, height);

    // Transform pixel to [-1,1] range
	float2 uv = float2((id.xy + _pixelOffset) / float2(width, height) * 2.0f - 1.0f);
    
    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv, _cameraToWorld, _cameraInverseProjection);

    float3 pos = ray.origin;
    
    
    TransformRay(ray, WorldToChunkIndex(pos));
    uint chunkData = FetchChunkData(pos);

    //max depth override for vulcan => has some very serious lags when using more than 10
    //dx11 doesnt work with computebuffer subupdates
    //uint maxDepth = 10;
        
    bool hasHit; int octantMask;
    if (chunkData != (1 << 31))
    {
        int startIndex = FetchChunkStartIndex(chunkData);
        int maxDepth = FetchChunkDepth(chunkData);

        TraceResult res;
        hasHit = TraceDagStreaming(_inVoxels, startIndex, maxDepth, ray, res, 0, octantMask);

        if (!hasHit)
        {
            //for (int i = 0; i < _chunkLoadRange * 2; i++)
            for (int i = 0; i < _chunkLoadRange + 1; i++)
            {
                TransformOutgoingRay(ray, res, pos);
                if (IsInWorld(pos))
                {
                    int flatChunkIndex = WorldToFlatChunkIndex(pos);

                    chunkData = FetchChunkData(pos);
                    startIndex = FetchChunkStartIndex(chunkData);
                    maxDepth = FetchChunkDepth(chunkData);

                    if (chunkData != (1 << 31))
                    {
                        hasHit = TraceDagStreaming(_inVoxels, startIndex, maxDepth, ray, res, 0, octantMask);
                    }
                }
            }
        }
        
        _outPositions[id.xy] = float4(res.hitPos, hasHit);
        return;
    }
        
    _outPositions[id.xy] = float4(0, 0, 0, 1);
}